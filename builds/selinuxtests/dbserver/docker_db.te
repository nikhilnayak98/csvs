policy_module(docker_db,1.0.0)
# pn: 2021-02-24: updated with dontaudit additions
# derived from:
#   Original material from James Dorgan
#   https://opensource.com/business/15/3/docker-security-tuning
#   https://opensource.com/article/18/2/understanding-selinux-labels-container-runtimes

# This template interface creates the docker_db_t type as a
# type which can be run as a docker container. To see what it does, look in 
# /usr/share/selinux/devel/include/contrib/virt.if
virt_sandbox_domain_template(docker_db);

################# put audit2allow rules in here ##############

require {
#	type policykit_auth_t;
	type sysfs_t;
	type node_t;
#	type policykit_t;
#	type setroubleshootd_t;
#	type system_dbusd_t;
#	type postfix_pickup_t;
	type docker_db_t;
	type mysqld_port_t;
#	type postfix_master_t;
#	class process { noatsecure rlimitinh siginh };
	class capability { setgid setuid };
	class tcp_socket { accept bind create getattr listen name_bind node_bind read setopt write };
	class file { open read };
	class netlink_route_socket { bind create getattr nlmsg_read read write };
	class lnk_file read;
	class udp_socket { connect create getattr ioctl };
	class dir read;
}

#============= docker_db_t ==============
allow docker_db_t mysqld_port_t:tcp_socket name_bind;
allow docker_db_t node_t:tcp_socket node_bind;
allow docker_db_t self:capability { setgid setuid };
allow docker_db_t self:netlink_route_socket { bind create getattr nlmsg_read read write };
allow docker_db_t self:tcp_socket { accept bind create getattr listen read setopt write };
allow docker_db_t self:udp_socket { connect create getattr ioctl };
allow docker_db_t sysfs_t:dir read;
allow docker_db_t sysfs_t:file { open read };
allow docker_db_t sysfs_t:lnk_file read;


################# end audit2allow additions ##################

# Permissive domains allow processes to not be blocked by SELinux
# Remove this rule, when you are confident in the policy.
# permissive docker_db_t;

##############################################################
# How to develop the docker_db policy
##############################################################
# The following narrative describes four sets of actions:
#   Actions that need doing only once at the beginning (one off actions)
#   Actions that need iterating during a development cycle
#   Actions that eventually might need doing at the end of the iteration cycle
#   Actions that need doing once at the end (finally actions)

# one off actions:
#   sudo yum install selinux-policy-devel

#   # edit the unit file so docker has selinux enabled
#   sudo nano /usr/lib/systemd/system/docker.service
#   # Modify one line from:
#   #     ExecStart=/usr/bin/dockerd
#   # To
#   #     ExecStart=/usr/bin/dockerd --selinux-enabled
#   # Save <CTRL> x and respond with y to "Save Changes" and press return to accept the filename.

#   # Restart docker:
#     # reload the unit file we have just editted:
#     sudo systemctl daemon-reload
#     systemctl restart docker
#     # confirm docker is running with selinux enabled
#     docker info | grep -A5 Security
#     systemctl status docker
# end of one off actions

# policy development iterative actions:
#   # edit this file (always increment version number in line 1)
#   # save the editted file

#   # compile this textual file into an executable policy (.pp) file
#   sudo make -f /usr/share/selinux/devel/Makefile docker_db.pp

#   # insert the policy file into the active kernel policies (ie so it can be used)
#   sudo semodule -i docker_db.pp

#   # confirm it is present (and check the version number)
#   sudo semodule -l | grep docker

#   # invoke the container with the policy applied
#   docker run ... --security-opt label:type:docker_db_t ...
#   # eg
#   # docker run --name chat_c -d -p 127.0.0.1:7777:6666  --security-opt label:type:docker_chat_t local/chat_i:0.2

# docker run -d --net u2182027/csvs2022_n --security-opt label:type:docker_db_t --cap-drop=ALL --cap-add=SETGID --cap-add=SETUID --ip 198.51.100.179 --hostname db.cyber22.test -e MYSQL_ROOT_PASSWORD="CorrectHorseBatteryStaple" -e MYSQL_DATABASE="csvs22db" --name u2182027_csvs2022-db_c u2182027/csvs2022-db_i:0.2

#   # use the service, then check for report policy contraventions
#   sudo cat /var/log/audit/audit.log
#   # convert these contraventions to text which could be editted into this .te file
#   sudo ausearch -m avc --start recent | audit2allow -r
#   # think - is it wise to edit these permissions into the .te ** DO NOT BLINDY APPEND THEM **
# end of iterative section

# Eventually actions:
#   # Once you get no avc denial reports for the policy being used against your running container
#   # Ensure that SELinux is enforcing
#   sudo setenforce 1; getenforce

#   # remove (ie comment out) the permisive rule at the end of your policy. 
#   # Go around the iterative loop again. If the container functions correctly, then drop to the "Finally" section.

#   # If the container silently still fails, (ie no avc denial messages in the audit log) "dontaudit" rules may be the issue.
#   # A dontaudit rule enforces policy but does not report that it has done so. To track these down:
#   # disable dontaudit (ie audit everything)
#   sudo semanage dontaudit off
#   # OR temporarily disable dontaudit until next build
#   sudo semodule -DB

#   # Go around the iterative loop again. Oce you get no further avc denial, then drop to the "Finally" section.
# end of Eventually section

# Finally actions: 
#   remove the permissive line at the end, 
#   set the version number to 1.0.0 
#   renable dontaudit (to reduce log noise) via  sudo semanage dontaudit on
#   run through the final edit cycle making no other changes
#   check the audit log

