policy_module(docker_webserver,1.0.0)
# pn: 2021-02-24: updated with dontaudit additions
# derived from:
#   Original material from James Dorgan
#   https://opensource.com/business/15/3/docker-security-tuning
#   https://opensource.com/article/18/2/understanding-selinux-labels-container-runtimes

# This template interface creates the docker_webserver_t type as a
# type which can be run as a docker container. To see what it does, look in 
# /usr/share/selinux/devel/include/contrib/virt.if
virt_sandbox_domain_template(docker_webserver);

################# put audit2allow rules in here ##############
require {
        type mysqld_port_t;
        type node_t;
        type http_port_t;
        class capability { chown net_bind_service setgid setuid };
        class tcp_socket { accept bind connect create getattr getopt listen name_bind name_connect node_bind setopt };
        class udp_socket create;
}

#============= docker_webserver_t ==============
allow docker_webserver_t http_port_t:tcp_socket name_bind;
allow docker_webserver_t mysqld_port_t:tcp_socket name_connect;
allow docker_webserver_t node_t:tcp_socket node_bind;
allow docker_webserver_t self:capability { chown net_bind_service setgid setuid };
allow docker_webserver_t self:tcp_socket { accept bind connect create getattr getopt listen setopt };
allow docker_webserver_t self:udp_socket create;
################# end audit2allow additions ##################

# Permissive domains allow processes to not be blocked by SELinux
# Remove this rule, when you are confident in the policy.
#permissive docker_webserver_t;

##############################################################
# How to develop the docker_webserver policy
##############################################################
# The following narrative describes four sets of actions:
#   Actions that need doing only once at the beginning (one off actions)
#   Actions that need iterating during a development cycle
#   Actions that eventually might need doing at the end of the iteration cycle
#   Actions that need doing once at the end (finally actions)

# one off actions:
#   sudo yum install selinux-policy-devel

#   # edit the unit file so docker has selinux enabled
#   sudo nano /usr/lib/systemd/system/docker.service
#   # Modify one line from:
#   #     ExecStart=/usr/bin/dockerd
#   # To
#   #     ExecStart=/usr/bin/dockerd --selinux-enabled
#   # Save <CTRL> x and respond with y to "Save Changes" and press return to accept the filename.

#   # Restart docker:
#     # reload the unit file we have just editted:
#     sudo systemctl daemon-reload
#     systemctl restart docker
#     # confirm docker is running with selinux enabled
#     docker info | grep -A5 Security
#     systemctl status docker
# end of one off actions

# policy development iterative actions:
#   # edit this file (always increment version number in line 1)
#   # save the editted file

#   # compile this textual file into an executable policy (.pp) file
#   sudo make -f /usr/share/selinux/devel/Makefile docker_webserver.pp

#   # insert the policy file into the active kernel policies (ie so it can be used)
#   sudo semodule -i docker_webserver.pp

#   # confirm it is present (and check the version number)
#   sudo semodule -l | grep docker

#   # invoke the container with the policy applied
#   docker run ... --security-opt label:type:docker_webserver_t ...
#   # eg
#   docker run --name chat_c -d -p 127.0.0.1:7777:6666  --security-opt label:type:docker_webserver_t local/chat_i:0.2

#   # use the service, then check for report policy contraventions
#   sudo cat /var/log/audit/audit.log
#   # convert these contraventions to text which could be editted into this .te file
#   sudo ausearch -m avc --start recent | audit2allow -r
#   # think - is it wise to edit these permissions into the .te ** DO NOT BLINDY APPEND THEM **
# end of iterative section

# Eventually actions:
#   # Once you get no avc denial reports for the policy being used against your running container
#   # Ensure that SELinux is enforcing
#   sudo setenforce 1; getenforce

#   # remove (ie comment out) the permisive rule at the end of your policy. 
#   # Go around the iterative loop again. If the container functions correctly, then drop to the "Finally" section.

#   # If the container silently still fails, (ie no avc denial messages in the audit log) "dontaudit" rules may be the issue.
#   # A dontaudit rule enforces policy but does not report that it has done so. To track these down:
#   # disable dontaudit (ie audit everything)
#   sudo semanage dontaudit off
#   # OR temporarily disable dontaudit until next build
#   sudo semodule -DB

#   # Go around the iterative loop again. Oce you get no further avc denial, then drop to the "Finally" section.
# end of Eventually section

# Finally actions: 
#   remove the permissive line at the end, 
#   set the version number to 1.0.0 
#   renable dontaudit (to reduce log noise) via  sudo semanage dontaudit on
#   run through the final edit cycle making no other changes
#   check the audit log

